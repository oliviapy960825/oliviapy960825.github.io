
@ read integers from a file and insert them into a binary tree to get sorted
@ and print the sorted tree to the screen (stdout).

.text
main:

	@ open an input file to read integers
	ldr r0, =InFileName
	mov r1, #0
	swi 0x66		@ open file
	ldr r1, =InFileHandle
	str r0, [r1]


	@ you should read the first integer from the file (see below for how)
	@ and creat a root node for your tree
	@ and save the root node address to the label MyTree (which is declared in .data) for late references

Loop:
	@ read integers from file
	ldr r1, =InFileHandle
	ldr r0, [r1]
	swi 0x6c	@ read an integer from a file (whose address is in r3)
	BCS CloseF	@ branch when the end of the file is reached

    
	@create a root node
	
Node:
    mov r2, r0 @r0 stores the address of the integer from the file
	mov r1, #16
	swi 0x12 @require 16 bits for r0
	str r2, [r1,#0]
	mov r2, #0
	str r2, [r1, #4]
	str r2, [r1, #8]
	str r2, [r1, #12]
	@str r0, =MyTree


Insert: @ your code for Insert goes here
    ldr r0, =MyTree
	cmp r0, #0 @check to see if root node is empty
	BNE DecideSide  @if theres already a root node
	mov r0, r1
    str r0, =MyTree		
	
CloseF:
	@close infile
	ldr r0, =InFileHandle
	ldr r0, [r0]
	swi 0x68	@ close the file
	B PrintTree
	@ put the root node address in r0
	@BL PrintTree  @ you print the integers in non-descending order

exit:	SWI 0x11       @ Stop program execution



@NewNode:
  @mov r2, r3 @ r3 stores the integer and then be passed to r2
  @mov r0, #16
  @swi 0x12
  @str r2, [r0, #0]
  @mov r2, #0
  @str r2, [r0, #4]
  @str r2, [r0, #8]
  @str r2, [r0, #12]
  @B Insert
  
  

	
PrintRightNode:
@print the right child node
    mov r0, r3
    B  Loop2

DecideSide:
    ldr r0, =MyTree
	ldr r0, [r0, #0]
	ldr r1, [r1, #0]
	cmp r0, r1
	BGT InsertLeft
	B InsertRight
    
InsertRight:
    ldr r0, [r0, #8]
	cmp r0, #0 
	BNE InsertRight
    str r1, [r0, #8]
	str r0, [r1, #12]
	
InsertLeft:
	ldr r0, [r0, #4]
	cmp r0, #0
	BNE InsertLeft
    str r1, [r0, #4]
	str r0, [r1, #12]

  


	


PrintTree: @ your code for PrintTree goes here
@ print the integer just read above
    ldr r0, =MyTree
Loop2:@find the left most node
	ldr r0, [r0, #4]
	cmp r0, #0
	BNE Loop2
	
PrintCurrentNode:
    ldr r0, [r0, #12]
    ldr r3, [r0, #8]     @ copy the right child node to r3
	ldr r1, [r0, #0]     @ copy the integer to r2 ready to print
	mov r2, r1
    mov r1, #1     @ Load 1 into register r1 (stdout handle)
    SWI 0x6b       @ Print integer in register r1 to stdout

@ print a space
    mov r0, #1
    ldr	r1, =Space
    swi	0x69    @ write string to stdout
	
@check if it has a right node
	cmp r3, #0
	BNE PrintRightNode
	
PrintParentNode:	@print the parent node
    ldr r4, [r3, #12]
	mov r0, r4
	B PrintCurrentNode
	
	




.data
MyTree: .word 0
InFileName: .asciz "list.txt"
InFileHandle: .word 0
Space: .ascii " "
